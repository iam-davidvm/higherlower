import{CARDS}from"../cards.js";const cardsObject=CARDS;let CARDDECK1=[],CARDDECK2=[],decksCreated=!1,decksSetting=localStorage.getItem("decks-setting"),cardsSetting=localStorage.getItem("cards-setting"),currentStreak=localStorage.getItem("current-streak"),longestStreak=localStorage.getItem("longest-streak"),cardsLeft=[],drawnCards=[],currentGuess=1,guessed=!1,chancesRevealed="hidden";const firstRow=document.querySelector(".first-row"),lastRow=document.querySelector(".last-row");let row=[];const currentStreakDisplay=document.querySelector(".streak-current-value"),longestStreakDisplay=document.querySelector(".streak-longest-value"),higherBtn=document.querySelector(".btn-higher"),lowerBtn=document.querySelector(".btn-lower"),chancesBtn=document.querySelector(".btn-show-hide"),chancesDisplay=document.querySelector(".chances"),overlay=document.querySelector("#overlay");function showStreaks(){currentStreak||(currentStreak=0),longestStreak||(longestStreak=0),currentStreakDisplay.textContent=currentStreak,longestStreakDisplay.textContent=longestStreak}function getDeckOfCards(){decksCreated||(CARDDECK1=cardsObject.map((e=>[e.value,e.card,e.description,e.img])),CARDDECK2=cardsObject.map((e=>[e.value,e.card,e.description,e.img])),decksCreated=!0),cardsLeft="one"===decksSetting?[...CARDDECK1]:CARDDECK1.concat(CARDDECK2)}function getScreenSize(){return window.innerWidth<=490?"mobile":"desktop"}function checkIfTablet(){const e=window.innerWidth;if(e>490&&e<=850)return!0}function responsiveDivWidths(e=99){const t=window.innerWidth;let r="desktop";if(t<=490?r="mobile":t<=850&&(r="small"),99===e)if(guessed)for(let t=0;t<row.length;t++)row[t].classList.contains("current-card")&&(e=t);else e=0;0===e&&"small"===r?(firstRow.children[1].classList.remove("hide-card"),firstRow.children[2].classList.remove("hide-card")):0===e&&"mobile"===r&&(firstRow.children[1].classList.add("hide-card"),firstRow.children[2].classList.add("hide-card")),e<=4?(firstRow.style.width="100%",lastRow.style.width="0%"):e>=7?(firstRow.style.width="100%","mobile"===r||"small"===r?(firstRow.style.width="0%",lastRow.style.width="100%"):firstRow.style.width="100%"):5===e?"small"===r?(firstRow.style.width="66.6%",lastRow.style.width="33.3%"):"mobile"===r?(firstRow.style.width="100%",lastRow.style.width="0%"):"desktop"===r&&(firstRow.style.width="100%",lastRow.style.width="100%"):6===e&&("small"===r?(firstRow.style.width="33.3%",lastRow.style.width="66.3%"):"mobile"===r?(firstRow.style.width="0%",lastRow.style.width="100%"):"desktop"===r&&(firstRow.style.width="100%",lastRow.style.width="100%"))}function drawCard(){let e=Math.floor(Math.random()*cardsLeft.length);return drawnCards=drawnCards.concat(cardsLeft.splice(e,1)),e}function checkChances(){const e=drawnCards[drawnCards.length-1],t=cardsLeft.filter((t=>t[0]<e[0])).length,r=Math.round(t/cardsLeft.length*100);chancesDisplay.textContent=r>50?`${r}% lower`:100-r+"% higher"}function renderPlayingCards(){drawCard();let e="";const t=checkIfTablet();for(let r=0;r<=5;r++)0===r?e=`\n                <div class="card current-card">\n                    <img src="../images/${getScreenSize()}${drawnCards[drawnCards.length-1][3]}" alt="${drawnCards[drawnCards.length-1][2]}" class="front-card card-img">\n                </div>\n            `:e+=1===r?'\n                <div class="card next-card">\n                    <img src="../images/back-red.png" alt="" class="card-img">\n                </div>\n            ':t&&2===r?'\n                <div class="card">\n                    <img src="../images/back-blue.png" alt="" class="card-img">\n                </div>\n            ':'\n                <div class="card hide-card">\n                    <img src="../images/back-blue.png" alt="" class="card-img">\n                </div>\n            ';firstRow.innerHTML=e;for(let e=0;e<firstRow.children.length;e++)row.push(firstRow.children[e]);if("eleven"===cardsSetting){let e="";for(let t=0;t<=5;t++)e+='\n            <div class="card hide-card hide">\n            <img src="../images/back-blue.png" alt="" class="card-img">\n            </div>\n            ';lastRow.innerHTML=e;for(let e=0;e<lastRow.children.length;e++)row.push(lastRow.children[e])}}function displayCard(e){responsiveDivWidths(e);const t=document.querySelectorAll(".card-img");if("five"!==cardsSetting&&5===e)for(let e=0;e<6;e++)lastRow.children[e].classList.remove("hide");row[e-1].classList.remove("current-card"),row[e-1].classList.add("last-card"),row[e-2]&&row[e-2].classList.add("hide-card"),t[e].src=`../images/${getScreenSize()}${drawnCards[drawnCards.length-1][3]}`,t[e].alt=`${drawnCards[drawnCards.length-1][2]}`,t[e].classList.add("front-card"),row[e].classList.remove("next-card"),row[e].classList.remove("hide-card"),row[e].classList.add("current-card"),row[e+1]&&(t[e+1]&&(t[e+1].src="../images/back-red.png",t[e+1].alt="The next card"),row[e+1].classList.remove("hide-card"),row[e+1].classList.add("next-card"))}function guess(e){guessed=!0,drawCard();const t=drawnCards[drawnCards.length-2],r=drawnCards[drawnCards.length-1];let s,a="";r[0]-t[0]==0?a="same":r[0]-t[0]<0?a="lower":r[0]-t[0]>0&&(a="higher"),s="same"===a||a===e,s?"five"===cardsSetting&&5===currentGuess||"eleven"===cardsSetting&&11===currentGuess?(displayCard(currentGuess),currentGuess=1,gameOver("won")):(displayCard(currentGuess),"revealed"===chancesRevealed&&checkChances(),currentGuess++):(displayCard(currentGuess),currentGuess=1,gameOver("lost"))}function gameOver(e){overlay.style.display="block";const t=document.querySelector(".win-lose"),r=document.querySelector(".game-message"),s=document.querySelector(".btn-win-lose"),a=document.querySelector("#decks"),n=document.querySelector("#cards");a.value=decksSetting,n.value=cardsSetting,r.textContent=`The last card was ${drawnCards[drawnCards.length-1][2]}`,"won"===e?(currentStreak++,t.textContent="You won!",s.textContent="Next Game",currentStreak>longestStreak&&(longestStreak=currentStreak),localStorage.setItem("current-streak",currentStreak),localStorage.setItem("longest-streak",longestStreak)):(currentStreak=0,t.textContent="You lost!",s.textContent="New Game",localStorage.removeItem("current-streak")),row=[],drawnCards=[],cardsLeft=[],guessed=!1,chancesRevealed="hidden"}function startNewOrNextGame(){const e=document.querySelector("#decks"),t=document.querySelector("#cards");localStorage.setItem("decks-setting",e.value),localStorage.setItem("cards-setting",t.value),cardsSetting=t.value,decksSetting=e.value,chancesBtn.setAttribute("data-chances","hidden"),chancesBtn.innerHTML='Reveal chances <span><i class="far fa-eye"></i> </span>',chancesDisplay.style.display="none",firstRow.style.width="100%",lastRow.style.width="0%",overlay.style.display="none",firstRow.textContent="",lastRow.textContent="",init()}function resizeScreen(){const e=window.innerWidth;responsiveDivWidths();const t=document.querySelectorAll(".front-card");if(e<=490)for(let e=0;e<t.length;e++)t[e].src=t[e].src.replace("desktop","mobile");else for(let e=0;e<t.length;e++)t[e].src=t[e].src.replace("mobile","desktop")}function init(){showStreaks(),getDeckOfCards(),renderPlayingCards()}decksSetting||window.open("../index.html","_self"),higherBtn.addEventListener("click",(function(){guess("higher")})),lowerBtn.addEventListener("click",(function(){guess("lower")})),chancesBtn.addEventListener("click",(function(){chancesRevealed=chancesBtn.getAttribute("data-chances"),"revealed"===chancesRevealed?(chancesBtn.setAttribute("data-chances","hidden"),chancesRevealed="hidden",chancesBtn.innerHTML='Reveal chances <span><i class="far fa-eye"></i> </span>',chancesDisplay.style.display="none"):(chancesBtn.setAttribute("data-chances","revealed"),chancesRevealed="revealed",chancesBtn.innerHTML='<span class="hide-mobile">Hide chances </span><i class="far fa-eye-slash"></i>',chancesDisplay.style.display="inline-block",checkChances())})),document.addEventListener("click",(function(e){e.target.classList.contains("btn-win-lose")&&startNewOrNextGame()})),document.addEventListener("keyup",(function(e){"ArrowUp"===e.key||"h"===e.key.toLowerCase()?guess("higher"):"ArrowDown"!==e.key&&"l"!==e.key.toLowerCase()||guess("lower")})),window.addEventListener("resize",resizeScreen),init();